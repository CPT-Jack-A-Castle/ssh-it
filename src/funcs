# shellcheck disable=SC2034 # unused variable warning for ansi colors

CY="\033[1;33m" # yellow
CG="\033[1;32m" # green
CR="\033[1;31m" # red
CC="\033[1;36m" # cyan
CM="\033[1;35m" # magenta
CF="\033[2m"    # faint
CN="\033[0m"    # none

# night-mode
CDY="\033[0;33m" # yellow
CDG="\033[0;32m" # green
CDR="\033[0;31m" # red
CDC="\033[0;36m" # cyan
CDM="\033[0;35m" # magenta

fsize()
{
	# Linux / OSX
	stat -L -c%s "$1" 2>/dev/null || stat -L -f%z "$1" 2>/dev/null
}

strip_ansi(){ sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g'; }

if [[ -z $THC_DEBUG ]]; then
	DEBUGF(){ :;}
	DEBUGF_R(){ :;}
else
	DEBUGF(){ echo -e "${CY}DEBUG:${CN} $*";}
	DEBUGF_R(){ echo -e "${CY}DEBUG:${CN} ${CR}$*${CN}";}
fi

# Example: env2array "VAR_ARGV" ENV_ARG"
# Construct bash array $VAR_ARGV[@] from $ENV_ARG_0, $ENV_ARG_1, etc
env2array()
{
	local n
	local x
	n=0

	eval "${1}=()"
	while :; do
		eval x="\$${2}_${n}"
		[[ -z $x ]] && break
		eval "${1}"+='('\""$x"\"')'
		n="$((n+1))"
	done
}

# Convert a command line into an array of ARGV arguments.
# cmdline2array ARGV -i ~/.ssh/id_rsa
# cmdline2array ARGV -i ~/.ssh/id\ rsa
# cmdline2array ARGV -i '~/.ssh/id rsa'
# => Will all result in an array of size 2
# There is no easy way but using the xarg/bash trick :/
cmdline2array()
{
	local line
	# Double eval: 1st: To turn $1 to argument string. 2nd to turn ~/.ssh to /home/user/.ssh
	line="$(echo "$2" | xargs bash -c 'n=0; while [[ $n -le ${#} ]]; do eval eval echo "\$${n}"; n=$((n+1)); done')"
	# echo "LINES=$line"
	IFS=$'\n' eval "${1}=(\$line)"
	IFS=" "
}


ERREXIT()
{
	local code
	code="$1"
	[[ -z $code ]] && code=99

	shift 1
	[[ -n $1 ]] && echo -e >&2 "${CR}ERROR:${CN} $*"

	exit "$code"
}

WARN()
{
	local code
	code="$1"
	[[ -z $code ]] && code=255

	shift 1
	echo -e >&2 "${CY}WARNING(${code}):${CN} $*"
}

funcs_init()
{
	if [[ -z $THC_BASEDIR ]]; then
		source "${HOME}/.prng/seed" &>/dev/null || ERREXIT 44 "THC_BASEDIR= is not set and ~/.prng/seed not found"
		[[ -z $THC_BASEDIR ]] && ERREXIT 45 "THC_BASEDIR= is not set and ~/.prng/seed not found"
	fi
}
